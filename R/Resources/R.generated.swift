//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `TopicViewController`, and contains static references to 1 segues.
    struct topicViewController {
      /// Segue identifier `pushToFavorite`.
      static let pushToFavorite: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TopicViewController, MovieFavoritesViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pushToFavorite")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `pushToFavorite`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushToFavorite(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TopicViewController, MovieFavoritesViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.topicViewController.pushToFavorite, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Circle`.
    static let circle = _R.storyboard.circle()
    /// Storyboard `Empty`.
    static let empty = _R.storyboard.empty()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `Kok`.
    static let kok = _R.storyboard.kok()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Movie`.
    static let movie = _R.storyboard.movie()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Topic`.
    static let topic = _R.storyboard.topic()
    /// Storyboard `UserDetail`.
    static let userDetail = _R.storyboard.userDetail()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Circle", bundle: ...)`
    static func circle(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.circle)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Empty", bundle: ...)`
    static func empty(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.empty)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Kok", bundle: ...)`
    static func kok(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.kok)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Movie", bundle: ...)`
    static func movie(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.movie)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Topic", bundle: ...)`
    static func topic(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.topic)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "UserDetail", bundle: ...)`
    static func userDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userDetail)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 179 images.
  struct image {
    /// Image `AGZR`.
    static let agzR = Rswift.ImageResource(bundle: R.hostingBundle, name: "AGZR")
    /// Image `Advertising_sport`.
    static let advertising_sport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Advertising_sport")
    /// Image `Advertising`.
    static let advertising = Rswift.ImageResource(bundle: R.hostingBundle, name: "Advertising")
    /// Image `BGZR`.
    static let bgzR = Rswift.ImageResource(bundle: R.hostingBundle, name: "BGZR")
    /// Image `Back_more`.
    static let back_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back_more")
    /// Image `Bookmark`.
    static let bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bookmark")
    /// Image `EBETZR`.
    static let ebetzR = Rswift.ImageResource(bundle: R.hostingBundle, name: "EBETZR")
    /// Image `Game_buyu`.
    static let game_buyu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game_buyu")
    /// Image `Game_caipiao`.
    static let game_caipiao = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game_caipiao")
    /// Image `Game_dianjing`.
    static let game_dianjing = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game_dianjing")
    /// Image `Game_qipai`.
    static let game_qipai = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game_qipai")
    /// Image `Game_sports`.
    static let game_sports = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game_sports")
    /// Image `Game_zhenren`.
    static let game_zhenren = Rswift.ImageResource(bundle: R.hostingBundle, name: "Game_zhenren")
    /// Image `IMDJ`.
    static let imdJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "IMDJ")
    /// Image `IMQP`.
    static let imqP = Rswift.ImageResource(bundle: R.hostingBundle, name: "IMQP")
    /// Image `IMTY`.
    static let imtY = Rswift.ImageResource(bundle: R.hostingBundle, name: "IMTY")
    /// Image `Icon_stick_zuixin`.
    static let icon_stick_zuixin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_stick_zuixin")
    /// Image `LHDJ`.
    static let lhdJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "LHDJ")
    /// Image `PGDZ`.
    static let pgdZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "PGDZ")
    /// Image `SGCP`.
    static let sgcP = Rswift.ImageResource(bundle: R.hostingBundle, name: "SGCP")
    /// Image `WMZR`.
    static let wmzR = Rswift.ImageResource(bundle: R.hostingBundle, name: "WMZR")
    /// Image `XJTY`.
    static let xjtY = Rswift.ImageResource(bundle: R.hostingBundle, name: "XJTY")
    /// Image `YBCP`.
    static let ybcP = Rswift.ImageResource(bundle: R.hostingBundle, name: "YBCP")
    /// Image `YBDZ`.
    static let ybdZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "YBDZ")
    /// Image `YBQP`.
    static let ybqP = Rswift.ImageResource(bundle: R.hostingBundle, name: "YBQP")
    /// Image `YBZR`.
    static let ybzR = Rswift.ImageResource(bundle: R.hostingBundle, name: "YBZR")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `back_more_white`.
    static let back_more_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_more_white")
    /// Image `back_white`.
    static let back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_white")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `background_girl`.
    static let background_girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_girl")
    /// Image `banner-huodong`.
    static let bannerHuodong = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner-huodong")
    /// Image `bg_yuandian`.
    static let bg_yuandian = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_yuandian")
    /// Image `button_baocun`.
    static let button_baocun = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_baocun")
    /// Image `button_bianji`.
    static let button_bianji = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_bianji")
    /// Image `button_fenxiang`.
    static let button_fenxiang = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_fenxiang")
    /// Image `button_weizuanzhong`.
    static let button_weizuanzhong = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_weizuanzhong")
    /// Image `button_xuanzhong`.
    static let button_xuanzhong = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_xuanzhong")
    /// Image `button_yaoqing`.
    static let button_yaoqing = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_yaoqing")
    /// Image `checkbox0`.
    static let checkbox0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox0")
    /// Image `checkbox1`.
    static let checkbox1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox1")
    /// Image `checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked")
    /// Image `defualt`.
    static let defualt = Rswift.ImageResource(bundle: R.hostingBundle, name: "defualt")
    /// Image `defult_user`.
    static let defult_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "defult_user")
    /// Image `delete-2`.
    static let delete2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete-2")
    /// Image `delete-3`.
    static let delete3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete-3")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `dianzi`.
    static let dianzi = Rswift.ImageResource(bundle: R.hostingBundle, name: "dianzi")
    /// Image `download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "download")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `fuhao`.
    static let fuhao = Rswift.ImageResource(bundle: R.hostingBundle, name: "fuhao")
    /// Image `game3`.
    static let game3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "game3")
    /// Image `girls`.
    static let girls = Rswift.ImageResource(bundle: R.hostingBundle, name: "girls")
    /// Image `icon-p1`.
    static let iconP1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-p1")
    /// Image `icon-p2`.
    static let iconP2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-p2")
    /// Image `icon-p3`.
    static let iconP3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-p3")
    /// Image `icon-p4`.
    static let iconP4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-p4")
    /// Image `icon-p5`.
    static let iconP5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-p5")
    /// Image `icon_Avatar`.
    static let icon_Avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Avatar")
    /// Image `icon_Captcha`.
    static let icon_Captcha = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Captcha")
    /// Image `icon_Collect`.
    static let icon_Collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Collect")
    /// Image `icon_Invitation code`.
    static let icon_InvitationCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Invitation code")
    /// Image `icon_Promote`.
    static let icon_Promote = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Promote")
    /// Image `icon_about us`.
    static let icon_aboutUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_about us")
    /// Image `icon_button_xuanzhong`.
    static let icon_button_xuanzhong = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_xuanzhong")
    /// Image `icon_buyu `.
    static let icon_buyu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_buyu ")
    /// Image `icon_caipiao1`.
    static let icon_caipiao1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_caipiao1")
    /// Image `icon_caipiao2`.
    static let icon_caipiao2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_caipiao2")
    /// Image `icon_caipiao`.
    static let icon_caipiao = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_caipiao")
    /// Image `icon_chahao`.
    static let icon_chahao = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chahao")
    /// Image `icon_chongzhi1`.
    static let icon_chongzhi1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chongzhi1")
    /// Image `icon_chongzhi`.
    static let icon_chongzhi = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chongzhi")
    /// Image `icon_classification`.
    static let icon_classification = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_classification")
    /// Image `icon_coin1`.
    static let icon_coin1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_coin1")
    /// Image `icon_coin2`.
    static let icon_coin2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_coin2")
    /// Image `icon_cunkuan`.
    static let icon_cunkuan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cunkuan")
    /// Image `icon_dianjing1`.
    static let icon_dianjing1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dianjing1")
    /// Image `icon_dianjing2`.
    static let icon_dianjing2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dianjing2")
    /// Image `icon_dianjing`.
    static let icon_dianjing = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dianjing")
    /// Image `icon_dianzan1`.
    static let icon_dianzan1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dianzan1")
    /// Image `icon_dianzi1`.
    static let icon_dianzi1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dianzi1")
    /// Image `icon_dianzi2`.
    static let icon_dianzi2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dianzi2")
    /// Image `icon_dingwei`.
    static let icon_dingwei = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dingwei")
    /// Image `icon_fenxiang`.
    static let icon_fenxiang = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_fenxiang")
    /// Image `icon_full screen`.
    static let icon_fullScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_full screen")
    /// Image `icon_girl`.
    static let icon_girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_girl")
    /// Image `icon_guanzhu`.
    static let icon_guanzhu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guanzhu")
    /// Image `icon_jiaru`.
    static let icon_jiaru = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_jiaru")
    /// Image `icon_kefu_white`.
    static let icon_kefu_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_kefu_white")
    /// Image `icon_kefu`.
    static let icon_kefu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_kefu")
    /// Image `icon_liuyan`.
    static let icon_liuyan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_liuyan")
    /// Image `icon_man`.
    static let icon_man = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_man")
    /// Image `icon_password`.
    static let icon_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_password")
    /// Image `icon_play`.
    static let icon_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play")
    /// Image `icon_progress bar`.
    static let icon_progressBar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_progress bar")
    /// Image `icon_qipai1`.
    static let icon_qipai1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qipai1")
    /// Image `icon_qipai2`.
    static let icon_qipai2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qipai2")
    /// Image `icon_qipai`.
    static let icon_qipai = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qipai")
    /// Image `icon_quanbu`.
    static let icon_quanbu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_quanbu")
    /// Image `icon_rechange`.
    static let icon_rechange = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_rechange")
    /// Image `icon_recharge centre`.
    static let icon_rechargeCentre = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_recharge centre")
    /// Image `icon_renshu`.
    static let icon_renshu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_renshu")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_shoucang1`.
    static let icon_shoucang1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shoucang1")
    /// Image `icon_shoucang2`.
    static let icon_shoucang2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shoucang2")
    /// Image `icon_shoucang`.
    static let icon_shoucang = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shoucang")
    /// Image `icon_shuaxin`.
    static let icon_shuaxin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shuaxin")
    /// Image `icon_sound_stop`.
    static let icon_sound_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sound_stop")
    /// Image `icon_sound`.
    static let icon_sound = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sound")
    /// Image `icon_success`.
    static let icon_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_success")
    /// Image `icon_task`.
    static let icon_task = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_task")
    /// Image `icon_tianxingzixun`.
    static let icon_tianxingzixun = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tianxingzixun")
    /// Image `icon_time out small`.
    static let icon_timeOutSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time out small")
    /// Image `icon_time out`.
    static let icon_timeOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time out")
    /// Image `icon_tiyu2`.
    static let icon_tiyu2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tiyu2")
    /// Image `icon_tiyu`.
    static let icon_tiyu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tiyu")
    /// Image `icon_tuiguang`.
    static let icon_tuiguang = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tuiguang")
    /// Image `icon_unfull screen`.
    static let icon_unfullScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_unfull screen")
    /// Image `icon_unvisible`.
    static let icon_unvisible = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_unvisible")
    /// Image `icon_user`.
    static let icon_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user")
    /// Image `icon_viddeo`.
    static let icon_viddeo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_viddeo")
    /// Image `icon_watch`.
    static let icon_watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_watch")
    /// Image `icon_weixuanzhong`.
    static let icon_weixuanzhong = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_weixuanzhong")
    /// Image `icon_xuanzhong`.
    static let icon_xuanzhong = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_xuanzhong")
    /// Image `icon_zhenren1`.
    static let icon_zhenren1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhenren1")
    /// Image `icon_zhenren2`.
    static let icon_zhenren2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhenren2")
    /// Image `icon_zhenren`.
    static let icon_zhenren = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhenren")
    /// Image `icon_zhuanti1`.
    static let icon_zhuanti1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhuanti1")
    /// Image `icon_zhuanti2`.
    static let icon_zhuanti2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhuanti2")
    /// Image `icon_zhuanzhang`.
    static let icon_zhuanzhang = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhuanzhang")
    /// Image `img_caipiao`.
    static let img_caipiao = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_caipiao")
    /// Image `img_chongzhi`.
    static let img_chongzhi = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_chongzhi")
    /// Image `img_dianjing`.
    static let img_dianjing = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_dianjing")
    /// Image `img_dianzi`.
    static let img_dianzi = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_dianzi")
    /// Image `img_qipai`.
    static let img_qipai = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_qipai")
    /// Image `img_tiyu`.
    static let img_tiyu = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_tiyu")
    /// Image `img_zhenren`.
    static let img_zhenren = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_zhenren")
    /// Image `iocn_tiyu1`.
    static let iocn_tiyu1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iocn_tiyu1")
    /// Image `jiaru`.
    static let jiaru = Rswift.ImageResource(bundle: R.hostingBundle, name: "jiaru")
    /// Image `kcoin`.
    static let kcoin = Rswift.ImageResource(bundle: R.hostingBundle, name: "kcoin")
    /// Image `kok_header`.
    static let kok_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "kok_header")
    /// Image `kok`.
    static let kok = Rswift.ImageResource(bundle: R.hostingBundle, name: "kok")
    /// Image `left_yuandian`.
    static let left_yuandian = Rswift.ImageResource(bundle: R.hostingBundle, name: "left_yuandian")
    /// Image `liulanliang`.
    static let liulanliang = Rswift.ImageResource(bundle: R.hostingBundle, name: "liulanliang")
    /// Image `live`.
    static let live = Rswift.ImageResource(bundle: R.hostingBundle, name: "live")
    /// Image `logo_1`.
    static let logo_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_1")
    /// Image `lottory`.
    static let lottory = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottory")
    /// Image `mine_background`.
    static let mine_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_background")
    /// Image `mine_sureBut`.
    static let mine_sureBut = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_sureBut")
    /// Image `nodata`.
    static let nodata = Rswift.ImageResource(bundle: R.hostingBundle, name: "nodata")
    /// Image `pay_ALIPAY`.
    static let pay_ALIPAY = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay_ALIPAY")
    /// Image `pay_NETBANK`.
    static let pay_NETBANK = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay_NETBANK")
    /// Image `pay_WECHAT`.
    static let pay_WECHAT = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay_WECHAT")
    /// Image `qianbao0`.
    static let qianbao0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qianbao0")
    /// Image `qianbao1`.
    static let qianbao1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qianbao1")
    /// Image `qipaai`.
    static let qipaai = Rswift.ImageResource(bundle: R.hostingBundle, name: "qipaai")
    /// Image `right_yuandian`.
    static let right_yuandian = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_yuandian")
    /// Image `seach`.
    static let seach = Rswift.ImageResource(bundle: R.hostingBundle, name: "seach")
    /// Image `shanglajiazai`.
    static let shanglajiazai = Rswift.ImageResource(bundle: R.hostingBundle, name: "shanglajiazai")
    /// Image `shoucang2`.
    static let shoucang2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "shoucang2")
    /// Image `sports`.
    static let sports = Rswift.ImageResource(bundle: R.hostingBundle, name: "sports")
    /// Image `tab_guangchang_selected`.
    static let tab_guangchang_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_guangchang_selected")
    /// Image `tab_guangchang`.
    static let tab_guangchang = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_guangchang")
    /// Image `tab_home_selected`.
    static let tab_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home_selected")
    /// Image `tab_home`.
    static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_mine_selected`.
    static let tab_mine_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_mine_selected")
    /// Image `tab_mine`.
    static let tab_mine = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_mine")
    /// Image `task_bg`.
    static let task_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "task_bg")
    /// Image `tianxing_money_bg`.
    static let tianxing_money_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tianxing_money_bg")
    /// Image `tianxing_qiaobao`.
    static let tianxing_qiaobao = Rswift.ImageResource(bundle: R.hostingBundle, name: "tianxing_qiaobao")
    /// Image `tuiguang_bg`.
    static let tuiguang_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tuiguang_bg")
    /// Image `uncheck`.
    static let uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheck")
    /// Image `weidianzan`.
    static let weidianzan = Rswift.ImageResource(bundle: R.hostingBundle, name: "weidianzan")
    /// Image `xuan_zhong_small`.
    static let xuan_zhong_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "xuan_zhong_small")
    /// Image `yidianzan`.
    static let yidianzan = Rswift.ImageResource(bundle: R.hostingBundle, name: "yidianzan")
    /// Image `zhuanhuan`.
    static let zhuanhuan = Rswift.ImageResource(bundle: R.hostingBundle, name: "zhuanhuan")
    /// Image `启动页`.
    static let 启动页 = Rswift.ImageResource(bundle: R.hostingBundle, name: "启动页")
    /// Image `电竞`.
    static let 电竞 = Rswift.ImageResource(bundle: R.hostingBundle, name: "电竞")
    /// Image `红包礼品`.
    static let 红包礼品 = Rswift.ImageResource(bundle: R.hostingBundle, name: "红包礼品")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AGZR", bundle: ..., traitCollection: ...)`
    static func agzR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agzR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Advertising", bundle: ..., traitCollection: ...)`
    static func advertising(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.advertising, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Advertising_sport", bundle: ..., traitCollection: ...)`
    static func advertising_sport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.advertising_sport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BGZR", bundle: ..., traitCollection: ...)`
    static func bgzR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgzR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Back_more", bundle: ..., traitCollection: ...)`
    static func back_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bookmark", bundle: ..., traitCollection: ...)`
    static func bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EBETZR", bundle: ..., traitCollection: ...)`
    static func ebetzR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ebetzR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Game_buyu", bundle: ..., traitCollection: ...)`
    static func game_buyu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_buyu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Game_caipiao", bundle: ..., traitCollection: ...)`
    static func game_caipiao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_caipiao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Game_dianjing", bundle: ..., traitCollection: ...)`
    static func game_dianjing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_dianjing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Game_qipai", bundle: ..., traitCollection: ...)`
    static func game_qipai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_qipai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Game_sports", bundle: ..., traitCollection: ...)`
    static func game_sports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_sports, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Game_zhenren", bundle: ..., traitCollection: ...)`
    static func game_zhenren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game_zhenren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IMDJ", bundle: ..., traitCollection: ...)`
    static func imdJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imdJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IMQP", bundle: ..., traitCollection: ...)`
    static func imqP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imqP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IMTY", bundle: ..., traitCollection: ...)`
    static func imtY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imtY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_stick_zuixin", bundle: ..., traitCollection: ...)`
    static func icon_stick_zuixin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_stick_zuixin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LHDJ", bundle: ..., traitCollection: ...)`
    static func lhdJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lhdJ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PGDZ", bundle: ..., traitCollection: ...)`
    static func pgdZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pgdZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SGCP", bundle: ..., traitCollection: ...)`
    static func sgcP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sgcP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WMZR", bundle: ..., traitCollection: ...)`
    static func wmzR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wmzR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "XJTY", bundle: ..., traitCollection: ...)`
    static func xjtY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xjtY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YBCP", bundle: ..., traitCollection: ...)`
    static func ybcP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ybcP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YBDZ", bundle: ..., traitCollection: ...)`
    static func ybdZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ybdZ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YBQP", bundle: ..., traitCollection: ...)`
    static func ybqP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ybqP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "YBZR", bundle: ..., traitCollection: ...)`
    static func ybzR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ybzR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_more_white", bundle: ..., traitCollection: ...)`
    static func back_more_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_more_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_white", bundle: ..., traitCollection: ...)`
    static func back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_girl", bundle: ..., traitCollection: ...)`
    static func background_girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner-huodong", bundle: ..., traitCollection: ...)`
    static func bannerHuodong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerHuodong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_yuandian", bundle: ..., traitCollection: ...)`
    static func bg_yuandian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_yuandian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_baocun", bundle: ..., traitCollection: ...)`
    static func button_baocun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_baocun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_bianji", bundle: ..., traitCollection: ...)`
    static func button_bianji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_bianji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_fenxiang", bundle: ..., traitCollection: ...)`
    static func button_fenxiang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_fenxiang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_weizuanzhong", bundle: ..., traitCollection: ...)`
    static func button_weizuanzhong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_weizuanzhong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_xuanzhong", bundle: ..., traitCollection: ...)`
    static func button_xuanzhong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_xuanzhong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_yaoqing", bundle: ..., traitCollection: ...)`
    static func button_yaoqing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_yaoqing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox0", bundle: ..., traitCollection: ...)`
    static func checkbox0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox1", bundle: ..., traitCollection: ...)`
    static func checkbox1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "defualt", bundle: ..., traitCollection: ...)`
    static func defualt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defualt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "defult_user", bundle: ..., traitCollection: ...)`
    static func defult_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defult_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete-2", bundle: ..., traitCollection: ...)`
    static func delete2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete-3", bundle: ..., traitCollection: ...)`
    static func delete3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dianzi", bundle: ..., traitCollection: ...)`
    static func dianzi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dianzi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fuhao", bundle: ..., traitCollection: ...)`
    static func fuhao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fuhao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "game3", bundle: ..., traitCollection: ...)`
    static func game3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.game3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "girls", bundle: ..., traitCollection: ...)`
    static func girls(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girls, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-p1", bundle: ..., traitCollection: ...)`
    static func iconP1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconP1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-p2", bundle: ..., traitCollection: ...)`
    static func iconP2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconP2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-p3", bundle: ..., traitCollection: ...)`
    static func iconP3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconP3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-p4", bundle: ..., traitCollection: ...)`
    static func iconP4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconP4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-p5", bundle: ..., traitCollection: ...)`
    static func iconP5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconP5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Avatar", bundle: ..., traitCollection: ...)`
    static func icon_Avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Captcha", bundle: ..., traitCollection: ...)`
    static func icon_Captcha(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Captcha, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Collect", bundle: ..., traitCollection: ...)`
    static func icon_Collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Collect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Invitation code", bundle: ..., traitCollection: ...)`
    static func icon_InvitationCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_InvitationCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Promote", bundle: ..., traitCollection: ...)`
    static func icon_Promote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Promote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_about us", bundle: ..., traitCollection: ...)`
    static func icon_aboutUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_aboutUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_xuanzhong", bundle: ..., traitCollection: ...)`
    static func icon_button_xuanzhong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_xuanzhong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_buyu ", bundle: ..., traitCollection: ...)`
    static func icon_buyu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_buyu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_caipiao", bundle: ..., traitCollection: ...)`
    static func icon_caipiao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_caipiao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_caipiao1", bundle: ..., traitCollection: ...)`
    static func icon_caipiao1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_caipiao1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_caipiao2", bundle: ..., traitCollection: ...)`
    static func icon_caipiao2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_caipiao2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chahao", bundle: ..., traitCollection: ...)`
    static func icon_chahao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chahao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chongzhi", bundle: ..., traitCollection: ...)`
    static func icon_chongzhi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chongzhi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chongzhi1", bundle: ..., traitCollection: ...)`
    static func icon_chongzhi1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chongzhi1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_classification", bundle: ..., traitCollection: ...)`
    static func icon_classification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_classification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_coin1", bundle: ..., traitCollection: ...)`
    static func icon_coin1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_coin1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_coin2", bundle: ..., traitCollection: ...)`
    static func icon_coin2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_coin2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cunkuan", bundle: ..., traitCollection: ...)`
    static func icon_cunkuan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cunkuan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dianjing", bundle: ..., traitCollection: ...)`
    static func icon_dianjing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dianjing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dianjing1", bundle: ..., traitCollection: ...)`
    static func icon_dianjing1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dianjing1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dianjing2", bundle: ..., traitCollection: ...)`
    static func icon_dianjing2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dianjing2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dianzan1", bundle: ..., traitCollection: ...)`
    static func icon_dianzan1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dianzan1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dianzi1", bundle: ..., traitCollection: ...)`
    static func icon_dianzi1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dianzi1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dianzi2", bundle: ..., traitCollection: ...)`
    static func icon_dianzi2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dianzi2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dingwei", bundle: ..., traitCollection: ...)`
    static func icon_dingwei(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dingwei, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_fenxiang", bundle: ..., traitCollection: ...)`
    static func icon_fenxiang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_fenxiang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_full screen", bundle: ..., traitCollection: ...)`
    static func icon_fullScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_fullScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_girl", bundle: ..., traitCollection: ...)`
    static func icon_girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guanzhu", bundle: ..., traitCollection: ...)`
    static func icon_guanzhu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guanzhu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_jiaru", bundle: ..., traitCollection: ...)`
    static func icon_jiaru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_jiaru, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_kefu", bundle: ..., traitCollection: ...)`
    static func icon_kefu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_kefu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_kefu_white", bundle: ..., traitCollection: ...)`
    static func icon_kefu_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_kefu_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_liuyan", bundle: ..., traitCollection: ...)`
    static func icon_liuyan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_liuyan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_man", bundle: ..., traitCollection: ...)`
    static func icon_man(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_man, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_password", bundle: ..., traitCollection: ...)`
    static func icon_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play", bundle: ..., traitCollection: ...)`
    static func icon_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_progress bar", bundle: ..., traitCollection: ...)`
    static func icon_progressBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_progressBar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qipai", bundle: ..., traitCollection: ...)`
    static func icon_qipai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qipai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qipai1", bundle: ..., traitCollection: ...)`
    static func icon_qipai1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qipai1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qipai2", bundle: ..., traitCollection: ...)`
    static func icon_qipai2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qipai2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_quanbu", bundle: ..., traitCollection: ...)`
    static func icon_quanbu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_quanbu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_rechange", bundle: ..., traitCollection: ...)`
    static func icon_rechange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rechange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_recharge centre", bundle: ..., traitCollection: ...)`
    static func icon_rechargeCentre(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rechargeCentre, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_renshu", bundle: ..., traitCollection: ...)`
    static func icon_renshu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_renshu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shoucang", bundle: ..., traitCollection: ...)`
    static func icon_shoucang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shoucang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shoucang1", bundle: ..., traitCollection: ...)`
    static func icon_shoucang1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shoucang1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shoucang2", bundle: ..., traitCollection: ...)`
    static func icon_shoucang2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shoucang2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shuaxin", bundle: ..., traitCollection: ...)`
    static func icon_shuaxin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shuaxin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sound", bundle: ..., traitCollection: ...)`
    static func icon_sound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sound_stop", bundle: ..., traitCollection: ...)`
    static func icon_sound_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sound_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_success", bundle: ..., traitCollection: ...)`
    static func icon_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_task", bundle: ..., traitCollection: ...)`
    static func icon_task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_task, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tianxingzixun", bundle: ..., traitCollection: ...)`
    static func icon_tianxingzixun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tianxingzixun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_time out small", bundle: ..., traitCollection: ...)`
    static func icon_timeOutSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_timeOutSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_time out", bundle: ..., traitCollection: ...)`
    static func icon_timeOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_timeOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tiyu", bundle: ..., traitCollection: ...)`
    static func icon_tiyu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tiyu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tiyu2", bundle: ..., traitCollection: ...)`
    static func icon_tiyu2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tiyu2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tuiguang", bundle: ..., traitCollection: ...)`
    static func icon_tuiguang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tuiguang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_unfull screen", bundle: ..., traitCollection: ...)`
    static func icon_unfullScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_unfullScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_unvisible", bundle: ..., traitCollection: ...)`
    static func icon_unvisible(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_unvisible, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_user", bundle: ..., traitCollection: ...)`
    static func icon_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_viddeo", bundle: ..., traitCollection: ...)`
    static func icon_viddeo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_viddeo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_watch", bundle: ..., traitCollection: ...)`
    static func icon_watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_weixuanzhong", bundle: ..., traitCollection: ...)`
    static func icon_weixuanzhong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_weixuanzhong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_xuanzhong", bundle: ..., traitCollection: ...)`
    static func icon_xuanzhong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_xuanzhong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhenren", bundle: ..., traitCollection: ...)`
    static func icon_zhenren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhenren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhenren1", bundle: ..., traitCollection: ...)`
    static func icon_zhenren1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhenren1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhenren2", bundle: ..., traitCollection: ...)`
    static func icon_zhenren2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhenren2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhuanti1", bundle: ..., traitCollection: ...)`
    static func icon_zhuanti1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhuanti1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhuanti2", bundle: ..., traitCollection: ...)`
    static func icon_zhuanti2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhuanti2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhuanzhang", bundle: ..., traitCollection: ...)`
    static func icon_zhuanzhang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhuanzhang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_caipiao", bundle: ..., traitCollection: ...)`
    static func img_caipiao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_caipiao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_chongzhi", bundle: ..., traitCollection: ...)`
    static func img_chongzhi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_chongzhi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_dianjing", bundle: ..., traitCollection: ...)`
    static func img_dianjing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_dianjing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_dianzi", bundle: ..., traitCollection: ...)`
    static func img_dianzi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_dianzi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_qipai", bundle: ..., traitCollection: ...)`
    static func img_qipai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_qipai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_tiyu", bundle: ..., traitCollection: ...)`
    static func img_tiyu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_tiyu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_zhenren", bundle: ..., traitCollection: ...)`
    static func img_zhenren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_zhenren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iocn_tiyu1", bundle: ..., traitCollection: ...)`
    static func iocn_tiyu1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iocn_tiyu1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jiaru", bundle: ..., traitCollection: ...)`
    static func jiaru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jiaru, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kcoin", bundle: ..., traitCollection: ...)`
    static func kcoin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kcoin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kok", bundle: ..., traitCollection: ...)`
    static func kok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kok, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kok_header", bundle: ..., traitCollection: ...)`
    static func kok_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kok_header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left_yuandian", bundle: ..., traitCollection: ...)`
    static func left_yuandian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left_yuandian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "liulanliang", bundle: ..., traitCollection: ...)`
    static func liulanliang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liulanliang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live", bundle: ..., traitCollection: ...)`
    static func live(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_1", bundle: ..., traitCollection: ...)`
    static func logo_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lottory", bundle: ..., traitCollection: ...)`
    static func lottory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_background", bundle: ..., traitCollection: ...)`
    static func mine_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_sureBut", bundle: ..., traitCollection: ...)`
    static func mine_sureBut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_sureBut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nodata", bundle: ..., traitCollection: ...)`
    static func nodata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nodata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay_ALIPAY", bundle: ..., traitCollection: ...)`
    static func pay_ALIPAY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay_ALIPAY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay_NETBANK", bundle: ..., traitCollection: ...)`
    static func pay_NETBANK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay_NETBANK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay_WECHAT", bundle: ..., traitCollection: ...)`
    static func pay_WECHAT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay_WECHAT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qianbao0", bundle: ..., traitCollection: ...)`
    static func qianbao0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qianbao0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qianbao1", bundle: ..., traitCollection: ...)`
    static func qianbao1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qianbao1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qipaai", bundle: ..., traitCollection: ...)`
    static func qipaai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qipaai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right_yuandian", bundle: ..., traitCollection: ...)`
    static func right_yuandian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_yuandian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "seach", bundle: ..., traitCollection: ...)`
    static func seach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seach, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shanglajiazai", bundle: ..., traitCollection: ...)`
    static func shanglajiazai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shanglajiazai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shoucang2", bundle: ..., traitCollection: ...)`
    static func shoucang2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoucang2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sports", bundle: ..., traitCollection: ...)`
    static func sports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sports, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_guangchang", bundle: ..., traitCollection: ...)`
    static func tab_guangchang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_guangchang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_guangchang_selected", bundle: ..., traitCollection: ...)`
    static func tab_guangchang_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_guangchang_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home_selected", bundle: ..., traitCollection: ...)`
    static func tab_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_mine", bundle: ..., traitCollection: ...)`
    static func tab_mine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_mine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_mine_selected", bundle: ..., traitCollection: ...)`
    static func tab_mine_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_mine_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "task_bg", bundle: ..., traitCollection: ...)`
    static func task_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.task_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tianxing_money_bg", bundle: ..., traitCollection: ...)`
    static func tianxing_money_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tianxing_money_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tianxing_qiaobao", bundle: ..., traitCollection: ...)`
    static func tianxing_qiaobao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tianxing_qiaobao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tuiguang_bg", bundle: ..., traitCollection: ...)`
    static func tuiguang_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tuiguang_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheck", bundle: ..., traitCollection: ...)`
    static func uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "weidianzan", bundle: ..., traitCollection: ...)`
    static func weidianzan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weidianzan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xuan_zhong_small", bundle: ..., traitCollection: ...)`
    static func xuan_zhong_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xuan_zhong_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yidianzan", bundle: ..., traitCollection: ...)`
    static func yidianzan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yidianzan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zhuanhuan", bundle: ..., traitCollection: ...)`
    static func zhuanhuan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zhuanhuan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "启动页", bundle: ..., traitCollection: ...)`
    static func 启动页(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.启动页, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "电竞", bundle: ..., traitCollection: ...)`
    static func 电竞(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.电竞, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "红包礼品", bundle: ..., traitCollection: ...)`
    static func 红包礼品(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.红包礼品, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `CircleDetailHead`.
    static let circleDetailHead = _R.nib._CircleDetailHead()
    /// Nib `CircleHomeRemarkCell`.
    static let circleHomeRemarkCell = _R.nib._CircleHomeRemarkCell()
    /// Nib `CircleHomeSearchTableCell`.
    static let circleHomeSearchTableCell = _R.nib._CircleHomeSearchTableCell()
    /// Nib `CommentCell2`.
    static let commentCell2 = _R.nib._CommentCell2()
    /// Nib `CommentCell`.
    static let commentCell = _R.nib._CommentCell()
    /// Nib `HomeCell`.
    static let homeCell = _R.nib._HomeCell()
    /// Nib `HomeChongzhiView`.
    static let homeChongzhiView = _R.nib._HomeChongzhiView()
    /// Nib `ImageCollectionViewCell`.
    static let imageCollectionViewCell = _R.nib._ImageCollectionViewCell()
    /// Nib `IssueReplyCell`.
    static let issueReplyCell = _R.nib._IssueReplyCell()
    /// Nib `KOKMoneyVC`.
    static let kokMoneyVC = _R.nib._KOKMoneyVC()
    /// Nib `MineTaskCell`.
    static let mineTaskCell = _R.nib._MineTaskCell()
    /// Nib `MineTaskHeaderFirst`.
    static let mineTaskHeaderFirst = _R.nib._MineTaskHeaderFirst()
    /// Nib `MineTaskHeadersecond`.
    static let mineTaskHeadersecond = _R.nib._MineTaskHeadersecond()
    /// Nib `OrderListCell`.
    static let orderListCell = _R.nib._OrderListCell()
    /// Nib `PhotoNumerVC`.
    static let photoNumerVC = _R.nib._PhotoNumerVC()
    /// Nib `TianXingQianBaoVC`.
    static let tianXingQianBaoVC = _R.nib._TianXingQianBaoVC()
    /// Nib `TopicListCell`.
    static let topicListCell = _R.nib._TopicListCell()
    /// Nib `VideoCollectionViewCell`.
    static let videoCollectionViewCell = _R.nib._VideoCollectionViewCell()
    /// Nib `searchTableCell`.
    static let searchTableCell = _R.nib._searchTableCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CircleDetailHead", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.circleDetailHead) instead")
    static func circleDetailHead(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.circleDetailHead)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CircleHomeRemarkCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.circleHomeRemarkCell) instead")
    static func circleHomeRemarkCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.circleHomeRemarkCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CircleHomeSearchTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.circleHomeSearchTableCell) instead")
    static func circleHomeSearchTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.circleHomeSearchTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentCell) instead")
    static func commentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentCell2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentCell2) instead")
    static func commentCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCell) instead")
    static func homeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeChongzhiView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeChongzhiView) instead")
    static func homeChongzhiView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeChongzhiView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCollectionViewCell) instead")
    static func imageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IssueReplyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.issueReplyCell) instead")
    static func issueReplyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.issueReplyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "KOKMoneyVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.kokMoneyVC) instead")
    static func kokMoneyVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.kokMoneyVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MineTaskCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mineTaskCell) instead")
    static func mineTaskCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineTaskCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MineTaskHeaderFirst", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mineTaskHeaderFirst) instead")
    static func mineTaskHeaderFirst(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineTaskHeaderFirst)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MineTaskHeadersecond", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mineTaskHeadersecond) instead")
    static func mineTaskHeadersecond(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineTaskHeadersecond)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderListCell) instead")
    static func orderListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PhotoNumerVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoNumerVC) instead")
    static func photoNumerVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoNumerVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TianXingQianBaoVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tianXingQianBaoVC) instead")
    static func tianXingQianBaoVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tianXingQianBaoVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopicListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topicListCell) instead")
    static func topicListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topicListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCollectionViewCell) instead")
    static func videoCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "searchTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchTableCell) instead")
    static func searchTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchTableCell)
    }
    #endif

    static func circleDetailHead(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CircleDetailHead? {
      return R.nib.circleDetailHead.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CircleDetailHead
    }

    static func circleHomeRemarkCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CircleHomeRemarkCell? {
      return R.nib.circleHomeRemarkCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CircleHomeRemarkCell
    }

    static func circleHomeSearchTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CircleHomeSearchTableCell? {
      return R.nib.circleHomeSearchTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CircleHomeSearchTableCell
    }

    static func commentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
      return R.nib.commentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
    }

    static func commentCell2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell2? {
      return R.nib.commentCell2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell2
    }

    static func homeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCell? {
      return R.nib.homeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCell
    }

    static func homeChongzhiView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeChongzhiView? {
      return R.nib.homeChongzhiView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeChongzhiView
    }

    static func imageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
      return R.nib.imageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
    }

    static func issueReplyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IssueReplyCell? {
      return R.nib.issueReplyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IssueReplyCell
    }

    static func kokMoneyVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.kokMoneyVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mineTaskCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTaskCell? {
      return R.nib.mineTaskCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTaskCell
    }

    static func mineTaskHeaderFirst(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTaskHeaderFirst? {
      return R.nib.mineTaskHeaderFirst.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTaskHeaderFirst
    }

    static func mineTaskHeadersecond(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTaskHeadersecond? {
      return R.nib.mineTaskHeadersecond.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTaskHeadersecond
    }

    static func orderListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderListCell? {
      return R.nib.orderListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderListCell
    }

    static func photoNumerVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.photoNumerVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> searchTableCell? {
      return R.nib.searchTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? searchTableCell
    }

    static func tianXingQianBaoVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tianXingQianBaoVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func topicListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicListCell? {
      return R.nib.topicListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicListCell
    }

    static func videoCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCollectionViewCell? {
      return R.nib.videoCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 16 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AttentionCell`.
    static let attentionCell: Rswift.ReuseIdentifier<AttentionCell> = Rswift.ReuseIdentifier(identifier: "AttentionCell")
    /// Reuse identifier `AvatarSelectionCell`.
    static let avatarSelectionCell: Rswift.ReuseIdentifier<AvatarSelectionCell> = Rswift.ReuseIdentifier(identifier: "AvatarSelectionCell")
    /// Reuse identifier `CircleNameListCell`.
    static let circleNameListCell: Rswift.ReuseIdentifier<CircleNameListCell> = Rswift.ReuseIdentifier(identifier: "CircleNameListCell")
    /// Reuse identifier `HomeMenuCell`.
    static let homeMenuCell: Rswift.ReuseIdentifier<HomeMenuCell> = Rswift.ReuseIdentifier(identifier: "HomeMenuCell")
    /// Reuse identifier `ImageCollectionViewCell`.
    static let imageCollectionViewCell: Rswift.ReuseIdentifier<ImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ImageCollectionViewCell")
    /// Reuse identifier `IssueReplyCell`.
    static let issueReplyCell: Rswift.ReuseIdentifier<IssueReplyCell> = Rswift.ReuseIdentifier(identifier: "IssueReplyCell")
    /// Reuse identifier `KOKGameHallCell`.
    static let kokGameHallCell: Rswift.ReuseIdentifier<KOKGameHallCell> = Rswift.ReuseIdentifier(identifier: "KOKGameHallCell")
    /// Reuse identifier `MovieFavoritesCell`.
    static let movieFavoritesCell: Rswift.ReuseIdentifier<MovieFavoritesCell> = Rswift.ReuseIdentifier(identifier: "MovieFavoritesCell")
    /// Reuse identifier `MovieListOnTopicHeaderView`.
    static let movieListOnTopicHeaderView: Rswift.ReuseIdentifier<MovieListOnTopicHeaderView> = Rswift.ReuseIdentifier(identifier: "MovieListOnTopicHeaderView")
    /// Reuse identifier `PhotoSelectionCell`.
    static let photoSelectionCell: Rswift.ReuseIdentifier<PhotoSelectionCell> = Rswift.ReuseIdentifier(identifier: "PhotoSelectionCell")
    /// Reuse identifier `RecentSearchCell`.
    static let recentSearchCell: Rswift.ReuseIdentifier<RecentSearchCell> = Rswift.ReuseIdentifier(identifier: "RecentSearchCell")
    /// Reuse identifier `SearchResultsViewHeader`.
    static let searchResultsViewHeader: Rswift.ReuseIdentifier<SearchResultsViewHeader> = Rswift.ReuseIdentifier(identifier: "SearchResultsViewHeader")
    /// Reuse identifier `TagCell`.
    static let tagCell: Rswift.ReuseIdentifier<TagCell> = Rswift.ReuseIdentifier(identifier: "TagCell")
    /// Reuse identifier `TopicMovieListCell`.
    static let topicMovieListCell: Rswift.ReuseIdentifier<TopicMovieListCell> = Rswift.ReuseIdentifier(identifier: "TopicMovieListCell")
    /// Reuse identifier `UserPublishListCell`.
    static let userPublishListCell: Rswift.ReuseIdentifier<UserPublishListCell> = Rswift.ReuseIdentifier(identifier: "UserPublishListCell")
    /// Reuse identifier `UserReplyListCell`.
    static let userReplyListCell: Rswift.ReuseIdentifier<UserReplyListCell> = Rswift.ReuseIdentifier(identifier: "UserReplyListCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CircleDetailHead.validate()
      try _CircleHomeRemarkCell.validate()
      try _CircleHomeSearchTableCell.validate()
      try _CommentCell.validate()
      try _CommentCell2.validate()
      try _HomeCell.validate()
      try _HomeChongzhiView.validate()
      try _IssueReplyCell.validate()
      try _KOKMoneyVC.validate()
      try _MineTaskCell.validate()
      try _MineTaskHeaderFirst.validate()
      try _MineTaskHeadersecond.validate()
      try _OrderListCell.validate()
      try _TianXingQianBaoVC.validate()
      try _TopicListCell.validate()
      try _searchTableCell.validate()
    }

    struct _CircleDetailHead: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CircleDetailHead"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CircleDetailHead? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CircleDetailHead
      }

      static func validate() throws {
        if UIKit.UIImage(named: "defualt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defualt' is used in nib 'CircleDetailHead', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_jiaru", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_jiaru' is used in nib 'CircleDetailHead', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CircleHomeRemarkCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CircleHomeRemarkCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CircleHomeRemarkCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CircleHomeRemarkCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in nib 'CircleHomeRemarkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in nib 'CircleHomeRemarkCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in nib 'CircleHomeRemarkCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CircleHomeSearchTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CircleHomeSearchTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CircleHomeSearchTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CircleHomeSearchTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in nib 'CircleHomeSearchTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guanzhu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guanzhu' is used in nib 'CircleHomeSearchTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in nib 'CircleHomeSearchTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CommentCell2: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommentCell2"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell2
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in nib 'CommentCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in nib 'CommentCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in nib 'CommentCell2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CommentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in nib 'CommentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in nib 'CommentCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in nib 'CommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon_stick_zuixin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon_stick_zuixin' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defualt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defualt' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_watch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_watch' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shoucang2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shoucang2' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "yidianzan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yidianzan' is used in nib 'HomeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HomeChongzhiView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeChongzhiView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeChongzhiView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeChongzhiView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tianxing_money_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tianxing_money_bg' is used in nib 'HomeChongzhiView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zhuanhuan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zhuanhuan' is used in nib 'HomeChongzhiView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "红包礼品", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '红包礼品' is used in nib 'HomeChongzhiView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ImageCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ImageCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "ImageCollectionViewCell"
      let name = "ImageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _IssueReplyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = IssueReplyCell

      let bundle = R.hostingBundle
      let identifier = "IssueReplyCell"
      let name = "IssueReplyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IssueReplyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IssueReplyCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in nib 'IssueReplyCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in nib 'IssueReplyCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in nib 'IssueReplyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _KOKMoneyVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "KOKMoneyVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_kefu_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_kefu_white' is used in nib 'KOKMoneyVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tianxing_money_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tianxing_money_bg' is used in nib 'KOKMoneyVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zhuanhuan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zhuanhuan' is used in nib 'KOKMoneyVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "红包礼品", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '红包礼品' is used in nib 'KOKMoneyVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MineTaskCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MineTaskCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTaskCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTaskCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "fuhao", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fuhao' is used in nib 'MineTaskCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kcoin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kcoin' is used in nib 'MineTaskCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MineTaskHeaderFirst: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MineTaskHeaderFirst"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTaskHeaderFirst? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTaskHeaderFirst
      }

      static func validate() throws {
        if UIKit.UIImage(named: "banner-huodong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner-huodong' is used in nib 'MineTaskHeaderFirst', but couldn't be loaded.") }
        if UIKit.UIImage(named: "task_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'task_bg' is used in nib 'MineTaskHeaderFirst', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MineTaskHeadersecond: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MineTaskHeadersecond"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MineTaskHeadersecond? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTaskHeadersecond
      }

      static func validate() throws {
        if UIKit.UIImage(named: "left_yuandian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left_yuandian' is used in nib 'MineTaskHeadersecond', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right_yuandian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right_yuandian' is used in nib 'MineTaskHeadersecond', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrderListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_rechange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_rechange' is used in nib 'OrderListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PhotoNumerVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoNumerVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TianXingQianBaoVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TianXingQianBaoVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_chongzhi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_chongzhi' is used in nib 'TianXingQianBaoVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_kefu_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_kefu_white' is used in nib 'TianXingQianBaoVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tianxing_money_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tianxing_money_bg' is used in nib 'TianXingQianBaoVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tianxing_qiaobao", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tianxing_qiaobao' is used in nib 'TianXingQianBaoVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TopicListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TopicListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopicListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopicListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_viddeo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_viddeo' is used in nib 'TopicListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _searchTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "searchTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> searchTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? searchTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "defualt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defualt' is used in nib 'searchTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try circle.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try empty.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try kok.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try movie.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try topic.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try userDetail.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct circle: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let circleListViewController = StoryboardViewControllerResource<CircleListViewController>(identifier: "CircleListViewController")
      let inputViewController = StoryboardViewControllerResource<InputViewController>(identifier: "InputViewController")
      let issueCommentReplyHeaderViewController = StoryboardViewControllerResource<IssueCommentReplyHeaderViewController>(identifier: "IssueCommentReplyHeaderViewController")
      let issueCommentReplyViewController = StoryboardViewControllerResource<IssueCommentReplyViewController>(identifier: "IssueCommentReplyViewController")
      let issueDetailHeaderViewController = StoryboardViewControllerResource<IssueDetailHeaderViewController>(identifier: "IssueDetailHeaderViewController")
      let issueDetailViewController = StoryboardViewControllerResource<IssueDetailViewController>(identifier: "IssueDetailViewController")
      let name = "Circle"
      let postingViewController = StoryboardViewControllerResource<PostingViewController>(identifier: "PostingViewController")
      let replyInputViewController = StoryboardViewControllerResource<ReplyInputViewController>(identifier: "ReplyInputViewController")

      func circleListViewController(_: Void = ()) -> CircleListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: circleListViewController)
      }

      func inputViewController(_: Void = ()) -> InputViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inputViewController)
      }

      func issueCommentReplyHeaderViewController(_: Void = ()) -> IssueCommentReplyHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: issueCommentReplyHeaderViewController)
      }

      func issueCommentReplyViewController(_: Void = ()) -> IssueCommentReplyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: issueCommentReplyViewController)
      }

      func issueDetailHeaderViewController(_: Void = ()) -> IssueDetailHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: issueDetailHeaderViewController)
      }

      func issueDetailViewController(_: Void = ()) -> IssueDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: issueDetailViewController)
      }

      func postingViewController(_: Void = ()) -> PostingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postingViewController)
      }

      func replyInputViewController(_: Void = ()) -> ReplyInputViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: replyInputViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "XRPlaceholder.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'XRPlaceholder.png' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox0' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox1' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checked' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete-3' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_fenxiang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_fenxiang' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_girl", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_girl' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_renshu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_renshu' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang1' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang2' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liulanliang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liulanliang' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_1' is used in storyboard 'Circle', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zl_btn_unselected.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zl_btn_unselected.png' is used in storyboard 'Circle', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.circle().circleListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'circleListViewController' could not be loaded from storyboard 'Circle' as 'CircleListViewController'.") }
        if _R.storyboard.circle().inputViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inputViewController' could not be loaded from storyboard 'Circle' as 'InputViewController'.") }
        if _R.storyboard.circle().issueCommentReplyHeaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'issueCommentReplyHeaderViewController' could not be loaded from storyboard 'Circle' as 'IssueCommentReplyHeaderViewController'.") }
        if _R.storyboard.circle().issueCommentReplyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'issueCommentReplyViewController' could not be loaded from storyboard 'Circle' as 'IssueCommentReplyViewController'.") }
        if _R.storyboard.circle().issueDetailHeaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'issueDetailHeaderViewController' could not be loaded from storyboard 'Circle' as 'IssueDetailHeaderViewController'.") }
        if _R.storyboard.circle().issueDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'issueDetailViewController' could not be loaded from storyboard 'Circle' as 'IssueDetailViewController'.") }
        if _R.storyboard.circle().postingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postingViewController' could not be loaded from storyboard 'Circle' as 'PostingViewController'.") }
        if _R.storyboard.circle().replyInputViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'replyInputViewController' could not be loaded from storyboard 'Circle' as 'ReplyInputViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct empty: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let emptyViewController = StoryboardViewControllerResource<EmptyViewController>(identifier: "EmptyViewController")
      let name = "Empty"

      func emptyViewController(_: Void = ()) -> EmptyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emptyViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "nodata", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'nodata' is used in storyboard 'Empty', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.empty().emptyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emptyViewController' could not be loaded from storyboard 'Empty' as 'EmptyViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeMenuPresentViewController = StoryboardViewControllerResource<HomeMenuPresentViewController>(identifier: "HomeMenuPresentViewController")
      let name = "Home"

      func homeMenuPresentViewController(_: Void = ()) -> HomeMenuPresentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeMenuPresentViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().homeMenuPresentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeMenuPresentViewController' could not be loaded from storyboard 'Home' as 'HomeMenuPresentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct kok: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let kokGameKindViewController = StoryboardViewControllerResource<KOKGameKindViewController>(identifier: "KOKGameKindViewController")
      let kokHomeViewController = StoryboardViewControllerResource<KOKHomeViewController>(identifier: "KOKHomeViewController")
      let kokPresentViewController = StoryboardViewControllerResource<KOKPresentViewController>(identifier: "KOKPresentViewController")
      let name = "Kok"

      func kokGameKindViewController(_: Void = ()) -> KOKGameKindViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kokGameKindViewController)
      }

      func kokHomeViewController(_: Void = ()) -> KOKHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kokHomeViewController)
      }

      func kokPresentViewController(_: Void = ()) -> KOKPresentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kokPresentViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button_weizuanzhong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_weizuanzhong' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button_xuanzhong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button_xuanzhong' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_caipiao1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_caipiao1' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_caipiao2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_caipiao2' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianjing1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianjing1' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianjing2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianjing2' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianzi1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzi1' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianzi2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzi2' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_qipai1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_qipai1' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_qipai2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_qipai2' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tiyu2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tiyu2' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_zhenren1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_zhenren1' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_zhenren2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_zhenren2' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_caipiao", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_caipiao' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iocn_tiyu1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iocn_tiyu1' is used in storyboard 'Kok', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kok_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kok_header' is used in storyboard 'Kok', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.kok().kokGameKindViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kokGameKindViewController' could not be loaded from storyboard 'Kok' as 'KOKGameKindViewController'.") }
        if _R.storyboard.kok().kokHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kokHomeViewController' could not be loaded from storyboard 'Kok' as 'KOKHomeViewController'.") }
        if _R.storyboard.kok().kokPresentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kokPresentViewController' could not be loaded from storyboard 'Kok' as 'KOKPresentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "启动页", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '启动页' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct movie: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let commentDetailHeaderViewController = StoryboardViewControllerResource<CommentDetailHeaderViewController>(identifier: "CommentDetailHeaderViewController")
      let commentReplyViewController = StoryboardViewControllerResource<CommentReplyViewController>(identifier: "CommentReplyViewController")
      let commentSectionHeaderViewController = StoryboardViewControllerResource<CommentSectionHeaderViewController>(identifier: "CommentSectionHeaderViewController")
      let inputViewController = StoryboardViewControllerResource<InputViewController>(identifier: "InputViewController")
      let movieDetailViewController = StoryboardViewControllerResource<MovieDetailViewController>(identifier: "MovieDetailViewController")
      let movieInfoHeaderViewController = StoryboardViewControllerResource<MovieInfoHeaderViewController>(identifier: "MovieInfoHeaderViewController")
      let moviePlayerViewController = StoryboardViewControllerResource<MoviePlayerViewController>(identifier: "MoviePlayerViewController")
      let movieRecommendsViewController = StoryboardViewControllerResource<MovieRecommendsViewController>(identifier: "MovieRecommendsViewController")
      let name = "Movie"
      let replyInputViewController = StoryboardViewControllerResource<ReplyInputViewController>(identifier: "ReplyInputViewController")
      let sdsPlayerVC = StoryboardViewControllerResource<SDSPlayerVC>(identifier: "SDSPlayerVC")

      func commentDetailHeaderViewController(_: Void = ()) -> CommentDetailHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentDetailHeaderViewController)
      }

      func commentReplyViewController(_: Void = ()) -> CommentReplyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentReplyViewController)
      }

      func commentSectionHeaderViewController(_: Void = ()) -> CommentSectionHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentSectionHeaderViewController)
      }

      func inputViewController(_: Void = ()) -> InputViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inputViewController)
      }

      func movieDetailViewController(_: Void = ()) -> MovieDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieDetailViewController)
      }

      func movieInfoHeaderViewController(_: Void = ()) -> MovieInfoHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieInfoHeaderViewController)
      }

      func moviePlayerViewController(_: Void = ()) -> MoviePlayerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moviePlayerViewController)
      }

      func movieRecommendsViewController(_: Void = ()) -> MovieRecommendsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieRecommendsViewController)
      }

      func replyInputViewController(_: Void = ()) -> ReplyInputViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: replyInputViewController)
      }

      func sdsPlayerVC(_: Void = ()) -> SDSPlayerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sdsPlayerVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_white' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_button_xuanzhong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_button_xuanzhong' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dingwei", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dingwei' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_fenxiang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_fenxiang' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_full screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_full screen' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guanzhu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guanzhu' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_play' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang1' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang2' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sound", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sound' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sound_stop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sound_stop' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_time out small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time out small' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_unfull screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_unfull screen' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liulanliang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liulanliang' is used in storyboard 'Movie', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shoucang2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shoucang2' is used in storyboard 'Movie', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.movie().commentDetailHeaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentDetailHeaderViewController' could not be loaded from storyboard 'Movie' as 'CommentDetailHeaderViewController'.") }
        if _R.storyboard.movie().commentReplyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentReplyViewController' could not be loaded from storyboard 'Movie' as 'CommentReplyViewController'.") }
        if _R.storyboard.movie().commentSectionHeaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentSectionHeaderViewController' could not be loaded from storyboard 'Movie' as 'CommentSectionHeaderViewController'.") }
        if _R.storyboard.movie().inputViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inputViewController' could not be loaded from storyboard 'Movie' as 'InputViewController'.") }
        if _R.storyboard.movie().movieDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieDetailViewController' could not be loaded from storyboard 'Movie' as 'MovieDetailViewController'.") }
        if _R.storyboard.movie().movieInfoHeaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieInfoHeaderViewController' could not be loaded from storyboard 'Movie' as 'MovieInfoHeaderViewController'.") }
        if _R.storyboard.movie().moviePlayerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moviePlayerViewController' could not be loaded from storyboard 'Movie' as 'MoviePlayerViewController'.") }
        if _R.storyboard.movie().movieRecommendsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieRecommendsViewController' could not be loaded from storyboard 'Movie' as 'MovieRecommendsViewController'.") }
        if _R.storyboard.movie().replyInputViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'replyInputViewController' could not be loaded from storyboard 'Movie' as 'ReplyInputViewController'.") }
        if _R.storyboard.movie().sdsPlayerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sdsPlayerVC' could not be loaded from storyboard 'Movie' as 'SDSPlayerVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let searchBarViewController = StoryboardViewControllerResource<SearchBarViewController>(identifier: "SearchBarViewController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func searchBarViewController(_: Void = ()) -> SearchBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchBarViewController)
      }

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete-2' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_button_xuanzhong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_button_xuanzhong' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liulanliang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liulanliang' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seach", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seach' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shoucang2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shoucang2' is used in storyboard 'Search', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().searchBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchBarViewController' could not be loaded from storyboard 'Search' as 'SearchBarViewController'.") }
        if _R.storyboard.search().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct topic: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let movieFavoritesViewController = StoryboardViewControllerResource<MovieFavoritesViewController>(identifier: "MovieFavoritesViewController")
      let movieListOnTopicViewController = StoryboardViewControllerResource<MovieListOnTopicViewController>(identifier: "MovieListOnTopicViewController")
      let name = "Topic"
      let tableViewSectionViewController = StoryboardViewControllerResource<TableViewSectionViewController>(identifier: "TableViewSectionViewController")
      let topicViewController = StoryboardViewControllerResource<TopicViewController>(identifier: "TopicViewController")

      func movieFavoritesViewController(_: Void = ()) -> MovieFavoritesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieFavoritesViewController)
      }

      func movieListOnTopicViewController(_: Void = ()) -> MovieListOnTopicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieListOnTopicViewController)
      }

      func tableViewSectionViewController(_: Void = ()) -> TableViewSectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tableViewSectionViewController)
      }

      func topicViewController(_: Void = ()) -> TopicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topicViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "XRPlaceholder.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'XRPlaceholder.png' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checked' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defualt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defualt' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_button_xuanzhong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_button_xuanzhong' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_time out", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time out' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "liulanliang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'liulanliang' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_1' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seach", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seach' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shoucang2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shoucang2' is used in storyboard 'Topic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uncheck' is used in storyboard 'Topic', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.topic().movieFavoritesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieFavoritesViewController' could not be loaded from storyboard 'Topic' as 'MovieFavoritesViewController'.") }
        if _R.storyboard.topic().movieListOnTopicViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieListOnTopicViewController' could not be loaded from storyboard 'Topic' as 'MovieListOnTopicViewController'.") }
        if _R.storyboard.topic().tableViewSectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tableViewSectionViewController' could not be loaded from storyboard 'Topic' as 'TableViewSectionViewController'.") }
        if _R.storyboard.topic().topicViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topicViewController' could not be loaded from storyboard 'Topic' as 'TopicViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct userDetail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fansListViewController = StoryboardViewControllerResource<FansListViewController>(identifier: "FansListViewController")
      let name = "UserDetail"
      let userDetailHeaderViewController = StoryboardViewControllerResource<UserDetailHeaderViewController>(identifier: "UserDetailHeaderViewController")
      let userDetailViewController = StoryboardViewControllerResource<UserDetailViewController>(identifier: "UserDetailViewController")
      let userPublishListViewController = StoryboardViewControllerResource<UserPublishListViewController>(identifier: "UserPublishListViewController")
      let userReplyListViewController = StoryboardViewControllerResource<UserReplyListViewController>(identifier: "UserReplyListViewController")

      func fansListViewController(_: Void = ()) -> FansListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fansListViewController)
      }

      func userDetailHeaderViewController(_: Void = ()) -> UserDetailHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userDetailHeaderViewController)
      }

      func userDetailViewController(_: Void = ()) -> UserDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userDetailViewController)
      }

      func userPublishListViewController(_: Void = ()) -> UserPublishListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userPublishListViewController)
      }

      func userReplyListViewController(_: Void = ()) -> UserReplyListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userReplyListViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "girls", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'girls' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dianzan1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dianzan1' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_girl", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_girl' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_liuyan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_liuyan' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_renshu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_renshu' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoucang", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoucang' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_wanghongzhubo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_wanghongzhubo' is used in storyboard 'UserDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.userDetail().fansListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fansListViewController' could not be loaded from storyboard 'UserDetail' as 'FansListViewController'.") }
        if _R.storyboard.userDetail().userDetailHeaderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userDetailHeaderViewController' could not be loaded from storyboard 'UserDetail' as 'UserDetailHeaderViewController'.") }
        if _R.storyboard.userDetail().userDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userDetailViewController' could not be loaded from storyboard 'UserDetail' as 'UserDetailViewController'.") }
        if _R.storyboard.userDetail().userPublishListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userPublishListViewController' could not be loaded from storyboard 'UserDetail' as 'UserPublishListViewController'.") }
        if _R.storyboard.userDetail().userReplyListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userReplyListViewController' could not be loaded from storyboard 'UserDetail' as 'UserReplyListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
